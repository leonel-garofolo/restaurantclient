/*
 * Created on 2019-06-27 ( Date ISO 2019-06-27 - Time 20:59:47 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package com.restaurant.app.persistence.impl.jdbc;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.inject.Named;

import com.restaurant.app.model.Clientes ;
import com.restaurant.app.persistence.ClientesPersistence;
import com.restaurant.app.persistence.impl.jdbc.commons.GenericJdbcDAO;

/**
 * Clientes persistence implementation 
 * 
 * @author Telosys
 *
 */
@Named("ClientesPersistence")
public class ClientesPersistenceJdbc extends GenericJdbcDAO<Clientes> implements ClientesPersistence{

	private final static String SQL_SELECT_ALL = 
		"select codigo, nombre, CUIT from clientes"; 

	private final static String SQL_SELECT = 
		"select codigo, nombre, CUIT from clientes where codigo = ?";

	private final static String SQL_INSERT = 
		"insert into clientes ( nombre, CUIT ) values ( ?, ? )";

	private final static String SQL_UPDATE = 
		"update clientes set nombre = ?, CUIT = ? where codigo = ?";

	private final static String SQL_DELETE = 
		"delete from clientes where codigo = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from clientes";

	private final static String SQL_COUNT = 
		"select count(*) from clientes where codigo = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public ClientesPersistenceJdbc() {
		super();
	}

    //----------------------------------------------------------------------
	@Override
	protected void setAutoIncrementedKey(Clientes record, long value) {
		record.setCodigo(value);
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForPrimaryKey(PreparedStatement ps, int i, Clientes clientes) throws SQLException {
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, clientes.getCodigo() ) ; // "codigo" : java.lang.Integer
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForInsert(PreparedStatement ps, int i, Clientes clientes) throws SQLException {
		//--- Set PRIMARY KEY and DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		// "codigo" is auto-incremented => no set in insert		
		setValue(ps, i++, clientes.getNombre() ) ; // "nombre" : java.lang.String
		setValue(ps, i++, clientes.getCuit() ) ; // "cuit" : java.lang.String
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForUpdate(PreparedStatement ps, int i, Clientes clientes) throws SQLException {
		//--- Set DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, clientes.getNombre() ) ; // "nombre" : java.lang.String
		setValue(ps, i++, clientes.getCuit() ) ; // "cuit" : java.lang.String
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, clientes.getCodigo() ) ; // "codigo" : java.lang.Integer
	}

	//----------------------------------------------------------------------
	/**
	 * Creates a new instance of the bean and populates it with the given primary value(s)
	 * @param codigo;
	 * @return the new instance
	 */
	private Clientes newInstanceWithPrimaryKey( Long codigo ) {
		Clientes clientes = new Clientes();
		clientes.setCodigo( codigo );		
		return clientes ;
	}

	//----------------------------------------------------------------------
	@Override
	protected Clientes newInstance() {
		return new Clientes() ;
	}

    //----------------------------------------------------------------------
	@Override
	protected Clientes populateBean(ResultSet rs, Clientes clientes) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		clientes.setCodigo(rs.getLong("codigo")); // java.lang.Integer
		if ( rs.wasNull() ) { clientes.setCodigo(null); }; // not primitive number => keep null value if any
		clientes.setNombre(rs.getString("nombre")); // java.lang.String		
		clientes.setCuit(rs.getString("CUIT")); // java.lang.String
		return clientes ;
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public Clientes findById( Long codigo ) {
		Clientes clientes = newInstanceWithPrimaryKey( codigo ) ;
		if ( super.doSelect(clientes) ) {
			return clientes ;
		}
		else {
			return null ; // Not found
		}
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public List<Clientes> findAll() {
		return super.doSelectAll();
	}

	//----------------------------------------------------------------------
	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s) in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from the database<br>
	 * If not found, the given instance remains unchanged
	 * @param clientes
	 * @return true if found, false if not found
	 */
	//@Override
	public boolean load( Clientes clientes ) {
		return super.doSelect(clientes) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database 
	 * @param clientes
	 */
	public long insert(Clientes clientes) {
		Long key = super.doInsertAutoIncr(clientes);
		return key.longValue();
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	
	public Clientes create(Clientes clientes) {
		insert(clientes);
		return clientes ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	
	public boolean update(Clientes clientes) {
		int r = super.doUpdate(clientes);
		return r > 0 ;

	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	
	public Clientes save(Clientes clientes) {
		if ( super.doExists(clientes) ) {
			super.doUpdate(clientes);
		}
		else {
			clientes.setCodigo(super.doInsertAutoIncr(clientes));
		}
		return clientes ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	
	public boolean deleteById( Long codigo ) {
		Clientes clientes = newInstanceWithPrimaryKey( codigo ) ;
		int r = super.doDelete(clientes);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	
	public boolean delete( Clientes clientes ) {
		int r = super.doDelete(clientes);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/**
	 * Checks the existence of a record in the database using the given primary key value(s)
	 * @param codigo;
	 * @return
	 */
	// @Override
	public boolean exists( Long codigo ) {
		Clientes clientes = newInstanceWithPrimaryKey( codigo ) ;
		return super.doExists(clientes);
	}
    //----------------------------------------------------------------------
	/**
	 * Checks the existence of the given bean in the database 
	 * @param clientes
	 * @return
	 */
	// @Override
	public boolean exists( Clientes clientes ) {
		return super.doExists(clientes);
	}

    //----------------------------------------------------------------------
	/**
	 * Counts all the records present in the database
	 * @return
	 */	
	public long countAll() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelectAll() {
		return SQL_SELECT_ALL;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}

}
