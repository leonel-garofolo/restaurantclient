/*
 * Created on 2019-06-27 ( Date ISO 2019-06-27 - Time 20:59:47 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package com.restaurant.app.persistence.impl.jdbc;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.inject.Named;

import com.restaurant.app.model.Categoria;
import com.restaurant.app.persistence.CategoriasPersistence;
import com.restaurant.app.persistence.impl.jdbc.commons.GenericJdbcDAO;

/**
 * Categoria persistence implementation 
 * 
 * @author Telosys
 *
 */
@Named("CategoriaPersistence")
public class CategoriasPersistenceJdbc extends GenericJdbcDAO<Categoria> implements CategoriasPersistence{

	private final static String SQL_SELECT_ALL = 
		"select id, nombre from categoria"; 

	private final static String SQL_SELECT = 
		"select id, nombre from categoria where id = ?";

	private final static String SQL_INSERT = 
		"insert into categoria ( nombre) values ( ? )";

	private final static String SQL_UPDATE = 
		"update categoria set nombre = ? where id = ?";

	private final static String SQL_DELETE = 
		"delete from categoria where id = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from categoria";

	private final static String SQL_COUNT = 
		"select count(*) from categoria where id = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public CategoriasPersistenceJdbc() {
		super();
	}

    //----------------------------------------------------------------------
	@Override
	protected void setAutoIncrementedKey(Categoria record, long value) {
		record.setId(value);
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForPrimaryKey(PreparedStatement ps, int i, Categoria Categoria) throws SQLException {
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, Categoria.getId() ) ; // "codigo" : java.lang.Integer
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForInsert(PreparedStatement ps, int i, Categoria Categoria) throws SQLException {
		//--- Set PRIMARY KEY and DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		// "codigo" is auto-incremented => no set in insert		
		setValue(ps, i++, Categoria.getNombre() ) ; // "nombre" : java.lang.String
		
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForUpdate(PreparedStatement ps, int i, Categoria Categoria) throws SQLException {
		//--- Set DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, Categoria.getNombre() ) ; // "nombre" : java.lang.String
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, Categoria.getId() ) ; // "codigo" : java.lang.Integer
	}

	//----------------------------------------------------------------------
	/**
	 * Creates a new instance of the bean and populates it with the given primary value(s)
	 * @param codigo;
	 * @return the new instance
	 */
	private Categoria newInstanceWithPrimaryKey( Long codigo ) {
		Categoria Categoria = new Categoria();
		Categoria.setId( codigo );
		return Categoria ;
	}

	//----------------------------------------------------------------------
	@Override
	protected Categoria newInstance() {
		return new Categoria() ;
	}

    //----------------------------------------------------------------------
	@Override
	protected Categoria populateBean(ResultSet rs, Categoria Categoria) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		Categoria.setId(rs.getLong("id")); // java.lang.Integer
		if ( rs.wasNull() ) { Categoria.setId(null); }; // not primitive number => keep null value if any
		Categoria.setNombre(rs.getString("nombre")); // java.lang.String
		return Categoria ;
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public Categoria findById( Long codigo ) {
		Categoria Categoria = newInstanceWithPrimaryKey( codigo ) ;
		if ( super.doSelect(Categoria) ) {
			return Categoria ;
		}
		else {
			return null ; // Not found
		}
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public List<Categoria> findAll() {
		return super.doSelectAll();
	}

	//----------------------------------------------------------------------
	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s) in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from the database<br>
	 * If not found, the given instance remains unchanged
	 * @param Categoria
	 * @return true if found, false if not found
	 */
	//@Override
	public boolean load( Categoria Categoria ) {
		return super.doSelect(Categoria) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database 
	 * @param Categoria
	 */
	public long insert(Categoria Categoria) {
		Long key = super.doInsertAutoIncr(Categoria);
		return key.longValue();
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	
	public Categoria create(Categoria Categoria) {
		insert(Categoria);
		return Categoria ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	
	public boolean update(Categoria Categoria) {
		int r = super.doUpdate(Categoria);
		return r > 0 ;

	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	
	public Categoria save(Categoria categoria) {
		if ( super.doExists(categoria) ) {
			super.doUpdate(categoria);
		}
		else {
			categoria.setId(super.doInsertAutoIncr(categoria));
		}
		return categoria ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	
	public boolean deleteById( Long codigo ) {
		Categoria Categoria = newInstanceWithPrimaryKey( codigo ) ;
		int r = super.doDelete(Categoria);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	
	public boolean delete( Categoria Categoria ) {
		int r = super.doDelete(Categoria);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/**
	 * Checks the existence of a record in the database using the given primary key value(s)
	 * @param codigo;
	 * @return
	 */
	// @Override
	public boolean exists( Long codigo ) {
		Categoria Categoria = newInstanceWithPrimaryKey( codigo ) ;
		return super.doExists(Categoria);
	}
    //----------------------------------------------------------------------
	/**
	 * Checks the existence of the given bean in the database 
	 * @param Categoria
	 * @return
	 */
	// @Override
	public boolean exists( Categoria Categoria ) {
		return super.doExists(Categoria);
	}

    //----------------------------------------------------------------------
	/**
	 * Counts all the records present in the database
	 * @return
	 */
	public long countAll() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelectAll() {
		return SQL_SELECT_ALL;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}

}
