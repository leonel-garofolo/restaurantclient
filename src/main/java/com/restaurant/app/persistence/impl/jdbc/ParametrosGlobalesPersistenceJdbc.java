/*
 * Created on 2019-07-27 ( Date ISO 2019-07-27 - Time 22:46:32 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package com.restaurant.app.persistence.impl.jdbc;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.inject.Named;

import com.restaurant.app.model.ParametrosGlobales;
import com.restaurant.app.persistence.ParametrosGlobalesPersistence;
import com.restaurant.app.persistence.impl.jdbc.commons.GenericJdbcDAO;

/**
 * ParametrosGlobales persistence implementation 
 * 
 * @author Telosys
 *
 */
@Named("ParametrosGlobalesPersistence")
public class ParametrosGlobalesPersistenceJdbc extends GenericJdbcDAO<ParametrosGlobales> implements ParametrosGlobalesPersistence {

	private final static String SQL_SELECT_ALL = 
		"select id, value, valueByte from parametros_globales"; 

	private final static String SQL_SELECT = 
		"select id, value, valueByte from parametros_globales where id = ?";

	private final static String SQL_INSERT = 
		"insert into parametros_globales ( id, value, valueByte ) values ( ?, ?, ? )";

	private final static String SQL_UPDATE = 
		"update parametros_globales set value = ?, valueByte = ? where id = ?";

	private final static String SQL_DELETE = 
		"delete from parametros_globales where id = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from parametros_globales";

	private final static String SQL_COUNT = 
		"select count(*) from parametros_globales where id = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public ParametrosGlobalesPersistenceJdbc() {
		super();
	}

    //----------------------------------------------------------------------
	@Override
	protected void setAutoIncrementedKey(ParametrosGlobales record, long value) {
		throw new IllegalStateException("Unexpected call to method 'setAutoIncrementedKey'");
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForPrimaryKey(PreparedStatement ps, int i, ParametrosGlobales parametrosGlobales) throws SQLException {
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, parametrosGlobales.getId() ) ; // "id" : java.lang.Integer
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForInsert(PreparedStatement ps, int i, ParametrosGlobales parametrosGlobales) throws SQLException {
		//--- Set PRIMARY KEY and DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, parametrosGlobales.getId() ) ; // "id" : java.lang.Integer
		setValue(ps, i++, parametrosGlobales.getValue() ) ; // "value" : java.lang.String
		setValue(ps, i++, parametrosGlobales.getValueByte() ) ; // "value" : java.lang.Blob
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForUpdate(PreparedStatement ps, int i, ParametrosGlobales parametrosGlobales) throws SQLException {
		//--- Set DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, parametrosGlobales.getValue() ) ; // "value" : java.lang.String
		setValue(ps, i++, parametrosGlobales.getValueByte() ) ; // "value" : java.lang.String
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, parametrosGlobales.getId() ) ; // "id" : java.lang.Integer
	}

	//----------------------------------------------------------------------
	/**
	 * Creates a new instance of the bean and populates it with the given primary value(s)
	 * @param id;
	 * @return the new instance
	 */
	private ParametrosGlobales newInstanceWithPrimaryKey( String id ) {
		ParametrosGlobales parametrosGlobales = new ParametrosGlobales();
		parametrosGlobales.setId( id );
		return parametrosGlobales ;
	}

	//----------------------------------------------------------------------
	@Override
	protected ParametrosGlobales newInstance() {
		return new ParametrosGlobales() ;
	}

    //----------------------------------------------------------------------
	@Override
	protected ParametrosGlobales populateBean(ResultSet rs, ParametrosGlobales parametrosGlobales) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		parametrosGlobales.setId(rs.getString("id")); // java.lang.Integer
		if ( rs.wasNull() ) { parametrosGlobales.setId(null); }; // not primitive number => keep null value if any
		parametrosGlobales.setValue(rs.getString("value")); // java.lang.String
		parametrosGlobales.setValueByte(rs.getBlob("valueByte")); // java.lang.String
		return parametrosGlobales ;
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public ParametrosGlobales findById( String id ) {
		ParametrosGlobales parametrosGlobales = newInstanceWithPrimaryKey( id ) ;
		if ( super.doSelect(parametrosGlobales) ) {
			return parametrosGlobales ;
		}
		else {
			return null ; // Not found
		}
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public List<ParametrosGlobales> findAll() {
		return super.doSelectAll();
	}

	//----------------------------------------------------------------------
	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s) in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from the database<br>
	 * If not found, the given instance remains unchanged
	 * @param parametrosGlobales
	 * @return true if found, false if not found
	 */
	//@Override
	public boolean load( ParametrosGlobales parametrosGlobales ) {
		return super.doSelect(parametrosGlobales) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database 
	 * @param parametrosGlobales
	 */
	public long insert(ParametrosGlobales parametrosGlobales) {
		super.doInsert(parametrosGlobales);
		return 0L ;
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */	
	public ParametrosGlobales create(ParametrosGlobales parametrosGlobales) {
		insert(parametrosGlobales);
		return parametrosGlobales ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */	
	public boolean update(ParametrosGlobales parametrosGlobales) {
		int r = super.doUpdate(parametrosGlobales);
		return r > 0 ;

	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public ParametrosGlobales save(ParametrosGlobales parametrosGlobales) {
		if ( super.doExists(parametrosGlobales) ) {
			super.doUpdate(parametrosGlobales);
		}
		else {
			super.doInsert(parametrosGlobales);
		}
		return parametrosGlobales ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public boolean deleteById( String id ) {
		ParametrosGlobales parametrosGlobales = newInstanceWithPrimaryKey( id ) ;
		int r = super.doDelete(parametrosGlobales);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */	
	public boolean delete( ParametrosGlobales parametrosGlobales ) {
		int r = super.doDelete(parametrosGlobales);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/**
	 * Checks the existence of a record in the database using the given primary key value(s)
	 * @param id;
	 * @return
	 */
	// @Override
	public boolean exists( String id ) {
		ParametrosGlobales parametrosGlobales = newInstanceWithPrimaryKey( id ) ;
		return super.doExists(parametrosGlobales);
	}
    //----------------------------------------------------------------------
	/**
	 * Checks the existence of the given bean in the database 
	 * @param parametrosGlobales
	 * @return
	 */
	// @Override
	public boolean exists( ParametrosGlobales parametrosGlobales ) {
		return super.doExists(parametrosGlobales);
	}

    //----------------------------------------------------------------------
	/**
	 * Counts all the records present in the database
	 * @return
	 */
	@Override
	public long countAll() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelectAll() {
		return SQL_SELECT_ALL;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}

}
